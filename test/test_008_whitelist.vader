# localvimrc test whitelist behavior

Before (setup test):
  " create test directory tree
  silent! !./setup.sh

  " default setup localvimrc
  source default.vim

  " initialize test variables
  let g:localvimrc_test_var = []

################################################################################
Execute (white single):
  " change setup for this test
  let g:localvimrc_whitelist = '.*/a/b/c/\(d/\)\?.lvimrc'
  let g:localvimrc_blacklist = '.*'

  " (re)load localvimrc plugin
  if exists("g:loaded_localvimrc")
    unlet g:loaded_localvimrc
  endif
  source ../plugin/localvimrc.vim

  " delete buffer if it exists
  if bufexists("/tmp/localvimrc_test/a/b/c/d/e/f/foo")
    exec "bwipeout! /tmp/localvimrc_test/a/b/c/d/e/f/foo"
  endif

  " edit a file in the test tree
  e /tmp/localvimrc_test/a/b/c/d/e/f/foo

Then (white single):
  let expected = [ "lvimrc: ./a/b/c", "lvimrc: ./a/b/c/d" ]
  Assert expected == g:localvimrc_test_var

################################################################################
Execute (white multiple):
  " change setup for this test
  let g:localvimrc_whitelist = [ ".*/a/b/c/.lvimrc", ".*/a/b/c/d/.lvimrc" ]
  let g:localvimrc_blacklist = '.*'

  " (re)load localvimrc plugin
  if exists("g:loaded_localvimrc")
    unlet g:loaded_localvimrc
  endif
  source ../plugin/localvimrc.vim

  " delete buffer if it exists
  if bufexists("/tmp/localvimrc_test/a/b/c/d/e/f/foo")
    exec "bwipeout! /tmp/localvimrc_test/a/b/c/d/e/f/foo"
  endif

  " edit a file in the test tree
  e /tmp/localvimrc_test/a/b/c/d/e/f/foo

Then (white multiple):
  let expected = [ "lvimrc: ./a/b/c", "lvimrc: ./a/b/c/d" ]
  Assert expected == g:localvimrc_test_var

  let expected = [ "/tmp/localvimrc_test/a/b/c/.lvimrc", "/tmp/localvimrc_test/a/b/c/d/.lvimrc" ]
  Assert expected == b:localvimrc_sourced_files
